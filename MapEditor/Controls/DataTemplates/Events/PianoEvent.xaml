<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:events="clr-namespace:MapEditor.Models.Elements.Events"
                    xmlns:controls="clr-namespace:MapEditor.Controls"
                    xmlns:validationrules="clr-namespace:MapEditor.Core.ValidationRules"
                    xmlns:converters="clr-namespace:MapEditor.Core.Converters">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/MapEditor;component/Controls/IconResources.xaml" />
        <ResourceDictionary Source="/MapEditor;component/Controls/Styles.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <converters:EqualsValueConverter x:Key="EqualsValueConverter" />

    <Style x:Key="PianoKeyRadioButton" TargetType="RadioButton"
           BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="GroupName" Value="PianoKey" />
        <Setter Property="VerticalContentAlignment" Value="Bottom" />
        <Setter Property="Padding" Value="0,5" />
        <Setter Property="Background" Value="White" />
    </Style>

    <Style x:Key="SharpPianoKeyRadioButton" TargetType="RadioButton"
           BasedOn="{StaticResource PianoKeyRadioButton}">
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Margin" Value="10,0,10,30" />
        <Setter Property="Background" Value="Black" />
        <Setter Property="Foreground" Value="White" />
    </Style>

    <DataTemplate DataType="{x:Type events:PianoEvent}">
        <StackPanel Orientation="Vertical">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="ObjectLabelColumn"/>
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <TextBlock Grid.Column="0"
                           VerticalAlignment="Center"
                           Text="Octave:"/>
                <controls:WheelCaptureIntegerUpDown Grid.Column="1" Minimum="-2" Maximum="8">
                    <controls:WheelCaptureIntegerUpDown.Text>
                        <Binding Path="Octave" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                            <Binding.ValidationRules>
                                <validationrules:MinMaxValidationRule ValidationStep="RawProposedValue" Minimum="-2" Maximum="8" />
                            </Binding.ValidationRules>
                        </Binding>
                    </controls:WheelCaptureIntegerUpDown.Text>
                </controls:WheelCaptureIntegerUpDown>
            </Grid>
            <Grid Height="80">
                <UniformGrid Columns="7">
                    <RadioButton Style="{StaticResource PianoKeyRadioButton}" IsChecked="{Binding NoteKey, Converter={StaticResource EqualsValueConverter}, ConverterParameter=C}"
                                 Content="C"/>
                    <RadioButton Style="{StaticResource PianoKeyRadioButton}" IsChecked="{Binding NoteKey, Converter={StaticResource EqualsValueConverter}, ConverterParameter=D}"
                                 Content="D"/>
                    <RadioButton Style="{StaticResource PianoKeyRadioButton}" IsChecked="{Binding NoteKey, Converter={StaticResource EqualsValueConverter}, ConverterParameter=E}"
                                 Content="E"/>
                    <RadioButton Style="{StaticResource PianoKeyRadioButton}" IsChecked="{Binding NoteKey, Converter={StaticResource EqualsValueConverter}, ConverterParameter=F}"
                                 Content="F"/>
                    <RadioButton Style="{StaticResource PianoKeyRadioButton}" IsChecked="{Binding NoteKey, Converter={StaticResource EqualsValueConverter}, ConverterParameter=G}"
                                 Content="G"/>
                    <RadioButton Style="{StaticResource PianoKeyRadioButton}" IsChecked="{Binding NoteKey, Converter={StaticResource EqualsValueConverter}, ConverterParameter=A}"
                                 Content="A"/>
                    <RadioButton Style="{StaticResource PianoKeyRadioButton}" IsChecked="{Binding NoteKey, Converter={StaticResource EqualsValueConverter}, ConverterParameter=B}"
                                 Content="B"/>
                </UniformGrid>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition />
                        <ColumnDefinition />
                        <ColumnDefinition />
                        <ColumnDefinition />
                        <ColumnDefinition />
                        <ColumnDefinition />
                        <ColumnDefinition />
                        <ColumnDefinition />
                        <ColumnDefinition />
                        <ColumnDefinition />
                        <ColumnDefinition />
                        <ColumnDefinition />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <RadioButton Style="{StaticResource SharpPianoKeyRadioButton}"
                                 Grid.Column="1" Grid.ColumnSpan="2"
                                 IsChecked="{Binding NoteKey, Converter={StaticResource EqualsValueConverter}, ConverterParameter=C#}"
                                 Content="C#"/>
                    <RadioButton Style="{StaticResource SharpPianoKeyRadioButton}"
                                 Grid.Column="3" Grid.ColumnSpan="2"
                                 IsChecked="{Binding NoteKey, Converter={StaticResource EqualsValueConverter}, ConverterParameter=D#}"
                                 Content="D#"/>
                    <RadioButton Style="{StaticResource SharpPianoKeyRadioButton}"
                                 Grid.Column="7" Grid.ColumnSpan="2"
                                 IsChecked="{Binding NoteKey, Converter={StaticResource EqualsValueConverter}, ConverterParameter=F#}"
                                 Content="F#"/>
                    <RadioButton Style="{StaticResource SharpPianoKeyRadioButton}"
                                 Grid.Column="9" Grid.ColumnSpan="2"
                                 IsChecked="{Binding NoteKey, Converter={StaticResource EqualsValueConverter}, ConverterParameter=G#}"
                                 Content="G#"/>
                    <RadioButton Style="{StaticResource SharpPianoKeyRadioButton}"
                                 Grid.Column="11" Grid.ColumnSpan="2"
                                 IsChecked="{Binding NoteKey, Converter={StaticResource EqualsValueConverter}, ConverterParameter=A#}"
                                 Content="A#"/>
                </Grid>
            </Grid>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="ObjectLabelColumn"/>
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <TextBlock Grid.Column="0"
                           VerticalAlignment="Center"
                           Text="Duration:"/>
                <controls:WheelCaptureIntegerUpDown Grid.Column="1" Minimum="0">
                    <controls:WheelCaptureIntegerUpDown.Text>
                        <Binding Path="FrameDuration" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                            <Binding.ValidationRules>
                                <validationrules:MinMaxValidationRule ValidationStep="RawProposedValue" Minimum="0" />
                            </Binding.ValidationRules>
                        </Binding>
                    </controls:WheelCaptureIntegerUpDown.Text>
                </controls:WheelCaptureIntegerUpDown>
            </Grid>
        </StackPanel>
    </DataTemplate>
</ResourceDictionary>